
============================================================================
API for the Server Persistent Storage

Revision 1 - 04/09/2015 - Matthew ONeil (matt125@vt.edu)
Revision 2 - 05/01/2015 - Prerana Rane (prerana3@vt.edu)
============================================================================

This document outlines the API for interacting with the serverside
persistent storage through Hypertext Transfer Protocol (HTTP). The requests
outlined in this document were designed to anticipate the queries required
by the different elements of the system including the application level
logic and the predictive algorithm. 

All requests begin with a field to indicate the type of the request. These
fields are defined in the 'Symbols Used' (1.0) section. Each request will
give a response to the user following the standard HTTP response protocol.
More information regarding HTTP responses can be found in the
'HTTP Responses' (6.0) section.

Note: Persistent Storage is responsible for generating unique ID's for each
object stored, and will return these to the caller. These ID's will be 64-bit
integers.

|---------------------------------------------------|
| Sections in this document:
| 1.0 Symbols Used
| 2.0 Requests Involving Devices
| 3.0 Requests for Retrieving Blobs
| 4.0 Requests for Accessing Log Files
| 5.0 Handling Objects
| 6.0 HTTP Responses
|     6.1 Status Codes
|     6.2 Header Fields
|     6.3 Message Body
|---------------------------------------------------|

============================================================================
1.0 Symbols Used
============================================================================
HD - get all devices in a specific house (directly stored and in rooms)
RD - get all devices in a specific room (for a certain house)
HT - get devices of a specific type in a specific house
RT - get devices of a specific type in a specific room (for a certain house)
DD - get a specific device in a specific house/room.

BU - get the blob stored in a user.
BH - get the blob stored in a house.
BR - get the blob stored in a room.
BD - get the blob stored in a device.

IU - get the user ID.
TU - get the user device token.

AL - get all log entries (actions) for a given location
AT - get all log entries (actions) by device type
AI - get all log entries (actions) by device ID
CL - get all computer (predictive algorithm) log entries by location
CT - get all computer (predictive algorithm) log entries by type
CI - get all computer (predictive algorithm) log entries by device ID

U - user
H - house
R - room
D - device
B - blob

UU - Update user data
UH - update house data
UR - update room data
UD - update device data

A - Action (actions that the user takes manually or by a verbal command)
C - Computer (takes actions autonomously ex: predictive algorithm)
* - Optional Field 
============================================================================
2.0 Requests Involving Devices
============================================================================
When these queries are successful, they return a list of JSON objects,
each with attributes 'device-id' and 'blob'. The 'blob' contains any data
provided when the device was loaded into the database, just as it was
provided. For HD and RD queries, there will be a 'device-type' attribute.

GET HD/HOUSEID
  RETURN all devices in a house, in a room or not in a room.

GET RD/HOUSEID/ROOMID
  Return all devices in a house in a room.
  ROOMID 0 is a special key meaning devices not contained in rooms.

GET DD/HOUSEID/ROOMID/DEVICEID
  Return a full device with a given ID in a house/room.
  ROOMID 0 means that the device is not in a room.

GET HT/HOUSEID/TYPE
    Same as HD, but also specify a type.

GET RT/HOUSEID/ROOMID/TYPE
    Same as RD, but also specifiy a device type.

============================================================================
3.0 Requests for Retrieving Blobs
============================================================================
GET BU/USERID
  Retrieve the information blob for a given user.

GET BH/HOUSEID
  Retrieve the formation blob for a given house.

GET BR/HOUSEID/ROOMID
  Retrieve the information blob for a given room.

GET BD/HOUSEID/ROOMID/DEVICEID
  Retrieve the information blob for a given device (perhaps in a room)
  
GET IU/USERNAME/PASS 
  Retrieve the USERID for the  username/password entered or Response 404 if the username/password do not match.

GET TU/USERID 
  Retrieve the user device token or Response 404 if the userid is not found.
============================================================================
4.0 Requests for Accessing Log Files
============================================================================
For each of these queries, a list of JSON objects representing a logged
action is returned. The 'blob' contains any data provided when the action
was loaded into the database.

Timeframes should be specified in ISO 8601 in UTC with the Z ending.

GET AL/USERID/TIMEFRAME/HOUSEID*/ROOMID*
    Query for each of the actions logged by this user before the provided
    time.
    Returns a list of JSON objects, with attributes 'time' and 'blob'.
    If house or room IDs are not specified, each JSON object will contain
    a 'house-id' and 'room-id' attribute.

GET AT/USERID/TIMEFRAME/DEVICETYPE/HOUSEID/ROOMID*
GET AI/USERID/TIMEFRAME/DEVICEID/HOUSEID/ROOMID*
GET CL/COMPID/TIMEFRAME/HOUSEID*/ROOMID*
GET CT/COMPID/TIMEFRAME/DEVICETYPE/HOUSEID*/ROOMID*
GET CI/COMPID/TIMEFRAME/DEVICEID/HOUSEID/ROOMID*

============================================================================
5.0 Handling Objects
============================================================================

POST U
    Post a new user to the database. The request body should include the
    blob for the user.
    Returns a unique ID for this user.

POST H
    Post a new house to the database. The request body should include the
    blob for the house.
    Returns a unique ID for this house.

POST R/HOUSEID
    Post a new room to a given house in the database. The request body should
    include the blob for the house.
    Returns a unique ID for this room.

POST D/HOUSEID/ROOMID/DEVICETYPE
    Post a device to a room. The request body should include the blob for the device.
    ROOMID 0 indicates that the device is stored directly in the house.
    Returns a unique ID for this device (in the given house/room)

POST UU/USERID
    Update the user data in a given user. The request body should include the
    update blob.

POST UH/HOUSEID
    Update the data in a given house. The request body should include the
    update blob.

POST UR/HOUSEID/ROOMID
    Update the data in a given room. The request body should include the
    update blob.

POST UD/HOUSEID/ROOMID/DEVICEID
    Update the data in a given device. The request body should include the
    update blob.
    
POST U/USERNAME/PASS/DTOKEN
    Creates a new User ID and associates it with the username/password combination.
    Returns the User ID or Response 404 if the username is already taken.

PATCH A/ID/TIME/HOUSEID/ROOMID/DEVICEID/DEVICETYPE
    Upload a new user action. The blob for the action should be in the request
    body. As above, the timeframe should be in ISO 6801.

PATCH C/ID/TIME/HOUSEID/ROOMID/DEVICEID/DEVICETYPE
    Log an action by the decision-making system. The request body should include
    the blob for the action.

DELETE A/USERID/
    Remove a user (and all his actions) from the database.

DELETE D/HOUSEID/ROOMID/DEVICEID
    Remove a device from the database.
    ROOMID == 0 implies the device is stored directly in the house.

DELETE R/HOUSEID/ROOMID
    Remove a room from a given house in the database.

DELETE H/HOUSEID
    Remove a house from the database.

============================================================================
6.0 HTTP Responses
============================================================================
Response messages in the standard HTTP protocol consist of the following:
    - a status line with a status code
    - header fields
    - an empty line
    - an optional message body

6.1 STATUS CODES
We will be using the standard HTTP status codes to indicate the status of
the requests.  The following is a list of notable status codes:
    - 200 OK
    - 400 Bad Request
    - 401 Unauthorized Access to Resource
    - 404 Resource Not Found
    - 500 Internal Server Error
    - 501 Not Implemented

A full list of status codes can be found at:
'http://en.wikipedia.org/wiki/List_of_HTTP_status_codes'

6.2 HEADER FIELDS
This field will be used to specify the formatting of the message body.
We have implemented the following header fields:
    - "Content Type","application/json"

6.3 MESSAGE BODY
Our primary method of returning information to the user is via JSON files.









