
============================================================================
API for the Server Persistent Storage
Assignment 5 Team 4

Revision 0 - 03/22/2015 - Brooke Taylor (bt2016@vt.edu)
Revision 1 - 04/05/2015 - Kevin DiMaria (kdoubled@vt.edu)
============================================================================


This document outlines the API for interacting with the serverside
persistent storage through Hypertext Transfer Protocol (HTTP). The requests
outlined in this document were designed to anticipate the queries required
by the different elements of the system including the application level
logic and the predictive algorithm. 

All requests begin with a field to indicate the type of the request. These
fields are defined in the 'Symbols Used' (1.0) section. Each request will
give a response to the user following the standard HTTP response protocol.
More information regarding HTTP responses can be found in the
'HTTP Responses' (6.0) section.

|---------------------------------------------------|
| Sections in this document:
| 1.0 Symbols Used
| 2.0 Requests Involving Devices
| 3.0 Requests for Getting Information about Users
| 4.0 Requests for Accessing Log Files
| 5.0 Handling Objects
| 6.0 HTTP Responses
|     6.1 Status Codes
|     6.2 Header Fields
|     6.3 Message Body
|---------------------------------------------------|

============================================================================
1.0 Symbols Used
============================================================================
HD - get all devices in a specific house
RD - get all devices in a specific room (for a certain house)
HT - get devices of a specific type in a specific house
RT - get devices of a specific type in a specific room (for a certain house)
UI - user information (accesses information from the userâ€™s profile)
AL - get all log entries (actions) for a given location
AT - get all log entries (actions) by device type
AI - get all log entries (actions) by device ID
CL - get all computer (predictive algorithm) log entries by location
CT - get all computer (predictive algorithm) log entries by type
CI - get all computer (predictive algorithm) log entries by device ID

D - device
R - room
H - house
U - user
A - action (actions that the user takes manually or by a verbal command)
C - computer (takes actions autonomously ex: predictive algorithm)

* denotes an optional field

============================================================================
2.0 Requests Involving Devices
============================================================================
When these queries are successful, they return a list of JSON objects,
each with attributes 'device-id' and 'blob'. The 'blob' contains any data
provided when the device was loaded into the database, just as it was
provided. For HD and RD queries, there will be a 'device-type' attribute.

GET HD/HOUSEID
<<<<<<< HEAD
GET HD/HOUSEID/DEVICEID
=======
   Query for all devices in a house.

>>>>>>> master
GET RD/HOUSEID/ROOMID
   Query for all devices in a room.

GET HT/HOUSEID/TYPE
   Query for all devices of a type in a house.

GET RT/HOUSEID/ROOMID/TYPE
   Query for all devices of a type in a room.

============================================================================
3.0 Requests for Getting Information about Users
============================================================================
GET HI/HOUSEID
   Returns a JSON object with two attributes: 'version' and 'blob'.

GET UI/USERID
   Returns the user blob directly. 

============================================================================
4.0 Requests for Accessing Log Files
============================================================================
For each of these queries, a list of JSON objects representing a logged
action is returned. The 'blob' contains any data provided when the action
was loaded into the database.

Timeframes should be specified in ISO 8601 in UTC with the Z ending.

GET AL/USERID/TIMEFRAME/HOUSEID*/ROOMID*
    Query for each of the actions logged by this user before the provided
    time.
    Returns a list of JSON objects, with attributes 'time' and 'blob'.
    If house or room IDs are not specified, each JSON object will contain
    a 'house-id' and 'room-id' attribute.

GET AT/USERID/TIMEFRAME/DEVICETYPE/HOUSEID/ROOMID
GET AI/USERID/TIMEFRAME/DEVICEID/HOUSEID/ROOMID
GET CL/USERID/TIMEFRAME/HOUSEID/ROOMID
GET CT/USERID/TIMEFRAME/DEVICETYPE/HOUSEID/ROOMID
GET CI/USERID/TIMEFRAME/DEVICEID/HOUSEID/ROOMID

============================================================================
5.0 Handling Objects
============================================================================
POST D/HOUSEID/VER/ROOM/DEVICETYPE/DEVICE
    Post a device to a room. You must provide the most recent version token
    you received. If you attempt a POST with the wrong version token,
    you will receive a 409 Conflict response. The request body should
    include the blob for the device.

POST R/HOUSEID/VER/ROOM
    Post a device to a room. You must provide the most recent version token
    you received. If you attempt a POST with the wrong version token,
    you will receive a 409 Conflict response. The request body should include
    the blob for the room, if any.

POST H/HOUSEID
    Post a new house to the database. The request body should include the
    blob for the house, if any.

POST U/USERID
    Post a new user to the database. The request body should include the
    blob for the user.

PATCH A/USER/TIMEFRAME/HOUSE/DEVICE*/ROOM*
    Upload a new user action. As above, the timeframe should be in ISO 6801.

PATCH C/USER/TIMEFRAME/HOUSE/DEVICE*/ROOM*
    Log an action by the decision-making system.

DELETE A/USER/
    Remove a user (and all his actions) from the database.

DELETE D/HOUSEID/VER/ROOM/DEVICE
    Remove a device from the database.

DELETE R/HOUSEID/VER/ROOM
    Remove a room from the database.

DELETE H/HOUSEID
    Remove a house from thte database.
============================================================================
6.0 HTTP Responses
============================================================================
Response messages in the standard HTTP protocol consist of the following:
    - a status line with a status code
    - header fields
    - an empty line
    - an optional message body

6.1 STATUS CODES
We will be using the standard HTTP status codes to indicate the status of
the requests.  The following is a list of notable status codes:
    - 200 OK
    - 400 Bad Request
    - 401 Unauthorized Access to Resource
    - 404 Resource Not Found
    - 500 Internal Server Error
    - 501 Not Implemented

A full list of status codes can be found at:
'http://en.wikipedia.org/wiki/List_of_HTTP_status_codes'

6.2 HEADER FIELDS
This field will be used to specify the formatting of the message body.
We have implemented the following header fields:
    - "Content Type","application/json"

6.3 MESSAGE BODY
Our primary method of returning information to the user is via JSON files.









